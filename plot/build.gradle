/*
 * Copyright 2019 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.yaml:snakeyaml:1.19'
    classpath 'com.github.spullara.mustache.java:compiler:0.9.6'
  }
}

plugins {
  id 'java-library'
  id 'jacoco'
  id 'com.github.spotbugs' version '1.6.10'
  id 'de.fuerstenau.buildconfig' version '1.1.8'
  id 'com.github.ben-manes.versions' version '0.21.0'
}

apply from: '../extra.gradle'

group = project.getProperty('groupName')
version = project.getProperty('releaseVersion')
archivesBaseName = "${project.parent.name}-${project.name}"

compileJava {
  def javaVersion = JavaVersion.VERSION_1_5
  project.setBootstrapClasspath(javaVersion, options)
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}

compileTestJava {
  def javaVersion = JavaVersion.VERSION_1_7
  project.setBootstrapClasspath(javaVersion, options)
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}

dependencies {
  compile project.hasProperty('deploy') ? "${group}:${project.parent.name}-lib:0.1" : project(':lib')
  compile 'com.intellij:annotations:12.0'
  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:2.4.1'
}

buildConfig {
  packageName "dm.shakespeare.${project.name}.config"
  buildConfigField 'long', 'VERSION_HASH_CODE', project.version.hashCode() + 'L'
}

jacoco {
  toolVersion project.getProperty('jacocoVersion')
}

jacocoTestReport {
  reports {
    xml.enabled = true // Coveralls plugin depends on xml format report
    html.enabled = true
  }
}

spotbugs {
  effort = 'max'
  reportLevel = 'low'
  toolVersion project.getProperty('spotbugsVersion')
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled false
    html.enabled = true
  }
}

task generateClasses(type: Task) {
  def arities = new org.yaml.snakeyaml.Yaml().load(file('res/arities.yaml').newInputStream())
  def scopes = []
  scopes += [
      classPrefix: 'Unary',
      paramTypes : [[prefix: 'first', type: 'T1', index: 0, hasNext: false]]
  ]
  def index = 1
  arities.forEach({ arity ->
    def clone = scopes[index - 1].paramTypes.collect({ scope -> scope.clone() })
    clone.last().hasNext = true
    scopes += [
        classPrefix: arity.prefix.capitalize(),
        paramTypes : clone + [[prefix: arity.param, type: "T${index + 1}", index: index, hasNext: false]]
    ]
    ++index
  })
  def factory = new com.github.mustachejava.DefaultMustacheFactory()
  def mainPath = "${buildDir}/generated/shakespeare/src/main"
  def plotPath = "${mainPath}/dm/shakespeare/plot"
  def functionPath = "${plotPath}/function"
  doFirst {
    file(functionPath).mkdirs()
    def writer = factory.compile(file('res/event.mustache').path).execute(new StringWriter(), [arities: scopes])
    file("${plotPath}/Event.java").newWriter().withWriter({ w -> w << writer })
    writer = factory.compile(file('res/story.mustache').path).execute(new StringWriter(), [arities: scopes])
    file("${plotPath}/Story.java").newWriter().withWriter({ w -> w << writer })
    scopes.stream().skip(1).forEach({ scope ->
      writer = factory.compile(file('res/function.mustache').path).execute(new StringWriter(), [scope])
      file("${functionPath}/${scope.classPrefix}Function.java").newWriter().withWriter({ w -> w << writer })
    })
  }
  project.sourceSets.main.java.srcDir(mainPath)
}

tasks.compileJava.dependsOn(generateClasses)
