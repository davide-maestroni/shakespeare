/*
 * Copyright 2019 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dm.shakespeare.plot;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import dm.shakespeare.BackStage;
import dm.shakespeare.actor.AbstractBehavior;
import dm.shakespeare.actor.Actor;
import dm.shakespeare.actor.Behavior;
import dm.shakespeare.actor.Behavior.Agent;
import dm.shakespeare.actor.Envelop;
import dm.shakespeare.actor.Options;
import dm.shakespeare.actor.Role;
import dm.shakespeare.concurrent.ExecutorServices;
import dm.shakespeare.function.Observer;
import dm.shakespeare.message.Bounce;
import dm.shakespeare.message.Receipt;
import dm.shakespeare.plot.Setting.Cache;
import dm.shakespeare.plot.function.Action;
import dm.shakespeare.plot.function.NullaryFunction;
{{#arities}}
import dm.shakespeare.plot.function.{{classPrefix}}Function;
{{/arities}}
import dm.shakespeare.plot.narrator.Narrator;
import dm.shakespeare.util.ConstantConditions;
import dm.shakespeare.util.Iterables;

/**
 * Created by davide-maestroni on 01/22/2019.
 */
public abstract class Event<T> {

  static final Object AVAILABLE = new Object();
  static final Object CANCEL = new Object();
  static final Object GET = new Object();
  static final Object NULL = new Object();

  private static final Observer<?> NO_OP = new Observer<Object>() {

    public void accept(final Object value) {
    }
  };

  @NotNull
  public static <T> Event<T> ofEffect(final T effect) {
    final Cache cache = Setting.get().getCache(Event.class);
    Event<T> event = cache.get(effect);
    if (event == null) {
      event = new EffectEvent<T>(effect);
      cache.put(effect, event);
    }
    return event;
  }

  @NotNull
  public static <T> Event<T> ofEvent(
      @NotNull final NullaryFunction<? extends Event<? extends T>> eventCreator) {
    return new FunctionEvent<T>(eventCreator);
  }

  @NotNull
  public static Event<Boolean> ofFalse() {
    return ofEffect(Boolean.FALSE);
  }

  @NotNull
  public static <T> Event<T> ofIncident(@NotNull final Throwable incident) {
    return new IncidentEvent<T>(incident);
  }

  @NotNull
  public static <T> EventNarrator<T> ofNarration() {
    return ofNarration(new LinkedBlockingQueue<Object>());
  }

  @NotNull
  public static <T> EventNarrator<T> ofNarration(@NotNull final BlockingQueue<Object> queue) {
    return new EventNarrator<T>(queue);
  }

  @NotNull
  public static <T> Event<T> ofNull() {
    return ofEffect(null);
  }

  @NotNull
  public static Event<Boolean> ofTrue() {
    return ofEffect(Boolean.TRUE);
  }
{{#arities}}

  @NotNull
  public static <{{#paramTypes}}{{type}}, {{/paramTypes}}R> Event<R> when({{#paramTypes}}@NotNull final Event<? extends {{type}}> {{prefix}}Event, {{/paramTypes}}
      @NotNull final {{classPrefix}}Function<{{#paramTypes}}? super {{type}}, {{/paramTypes}}? extends Event<? extends R>> effectHandler) {
    return new {{classPrefix}}Event<{{#paramTypes}}{{type}}, {{/paramTypes}}R>({{#paramTypes}}{{prefix}}Event, {{/paramTypes}}effectHandler);
  }
{{/arities}}

  @NotNull
  public static <T, R> Event<R> when(@NotNull final Iterable<? extends Event<? extends T>> events,
      @NotNull final UnaryFunction<? super List<T>, ? extends Event<? extends R>> effectHandler) {
    return new GenericEvent<T, R>(events, effectHandler);
  }
{{#arities}}

  @NotNull
  public static <{{#paramTypes}}{{type}}, {{/paramTypes}}R> Event<R> whenTransform({{#paramTypes}}@NotNull final Event<? extends {{type}}> {{prefix}}Event, {{/paramTypes}}
      @NotNull final {{classPrefix}}Function<{{#paramTypes}}? super {{type}}, {{/paramTypes}}? extends R> effectHandler) {
    return new {{classPrefix}}TransformEvent<{{#paramTypes}}{{type}}, {{/paramTypes}}R>({{#paramTypes}}{{prefix}}Event, {{/paramTypes}}effectHandler);
  }
{{/arities}}

  @NotNull
  public static <T, R> Event<R> whenTransform(
      @NotNull final Iterable<? extends Event<? extends T>> events,
      @NotNull final UnaryFunction<? super List<T>, ? extends R> effectHandler) {
    return new GenericTransformEvent<T, R>(events, effectHandler);
  }

  static void done(final Object message, @NotNull final Map<String, Sender> senders,
      @NotNull final Agent agent) {
    final Actor self = agent.getSelf();
    for (final Sender sender : senders.values()) {
      sender.getSender().tell(message, sender.getOptions(), self);
    }
    agent.setBehavior(new DoneBehavior(message));
  }

  static boolean isFalse(@Nullable final Event<?> event) {
    final Cache cache = Setting.get().getCache(Event.class);
    return cache.get(Boolean.FALSE) == event;
  }

  static boolean isNull(@Nullable final Event<?> event) {
    final Cache cache = Setting.get().getCache(Event.class);
    return cache.get(null) == event;
  }

  static boolean isTrue(@Nullable final Event<?> event) {
    final Cache cache = Setting.get().getCache(Event.class);
    return cache.get(Boolean.TRUE) == event;
  }

  private static boolean isSame(@Nullable final Object expected, @Nullable final Object actual) {
    return (expected == actual) || (expected != null) && expected.equals(actual);
  }

  public void cancel() {
    getActor().tell(CANCEL, null, BackStage.STAND_IN);
  }

  @NotNull
  public Event<T> eventually(@NotNull final Action eventualAction) {
    return new EventualEvent<T>(this, eventualAction);
  }

  public void play(@NotNull final EventObserver<? super T> eventObserver) {
    final Actor actor = BackStage.newActor(new EventObserverRole<T>(eventObserver));
    final String threadId = actor.getId();
    getActor().tell(GET, new Options().withReceiptId(threadId).withThreadId(threadId), actor);
  }

  public void play(@Nullable final Observer<? super T> effectObserver,
      @Nullable final Observer<? super Throwable> incidentObserver) {
    play(new DefaultEventObserver<T>(effectObserver, incidentObserver));
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E1 extends Throwable, E2 extends Throwable, E3 extends Throwable> Event<T> resolve(
      @NotNull final Class<? extends E1> firstType, @NotNull final Class<? extends E2> secondType,
      @NotNull final Class<? extends E3> thirdType,
      @NotNull final UnaryFunction<? super E1, ? extends Event<T>> incidentObserver) {
    final HashSet<Class<? extends Throwable>> types = new HashSet<Class<? extends Throwable>>();
    types.add(firstType);
    types.add(secondType);
    types.add(thirdType);
    return new ResolveEvent<T>(this, types,
        (UnaryFunction<? super Throwable, ? extends Event<T>>) incidentObserver);
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E1 extends Throwable, E2 extends Throwable> Event<T> resolve(
      @NotNull final Class<? extends E1> firstType, @NotNull final Class<? extends E2> secondType,
      @NotNull final UnaryFunction<? super E1, ? extends Event<T>> incidentObserver) {
    final HashSet<Class<? extends Throwable>> types = new HashSet<Class<? extends Throwable>>();
    types.add(firstType);
    types.add(secondType);
    return new ResolveEvent<T>(this, types,
        (UnaryFunction<? super Throwable, ? extends Event<T>>) incidentObserver);
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E1 extends Throwable> Event<T> resolve(@NotNull final Class<? extends E1> firstType,
      @NotNull final UnaryFunction<? super E1, ? extends Event<T>> incidentObserver) {
    final Set<Class<? extends Throwable>> types =
        Collections.<Class<? extends Throwable>>singleton(firstType);
    return new ResolveEvent<T>(this, types,
        (UnaryFunction<? super Throwable, ? extends Event<T>>) incidentObserver);
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E extends Throwable> Event<T> resolve(
      @NotNull final Iterable<? extends Class<? extends E>> incidentTypes,
      @NotNull final UnaryFunction<? super E, ? extends Event<T>> incidentObserver) {
    return new ResolveEvent<T>(this, Iterables.<Class<? extends Throwable>>toSet(incidentTypes),
        (UnaryFunction<? super Throwable, ? extends Event<T>>) incidentObserver);
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E1 extends Throwable, E2 extends Throwable, E3 extends Throwable> Event<T> resolveTransform(
      @NotNull final Class<? extends E1> firstType, @NotNull final Class<? extends E2> secondType,
      @NotNull final Class<? extends E3> thirdType,
      @NotNull final UnaryFunction<? super E1, ? extends T> incidentObserver) {
    final HashSet<Class<? extends Throwable>> types = new HashSet<Class<? extends Throwable>>();
    types.add(firstType);
    types.add(secondType);
    types.add(thirdType);
    return new ResolveTransformEvent<T>(this, types,
        (UnaryFunction<? super Throwable, ? extends T>) incidentObserver);
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E1 extends Throwable, E2 extends Throwable> Event<T> resolveTransform(
      @NotNull final Class<? extends E1> firstType, @NotNull final Class<? extends E2> secondType,
      @NotNull final UnaryFunction<? super E1, ? extends T> incidentObserver) {
    final HashSet<Class<? extends Throwable>> types = new HashSet<Class<? extends Throwable>>();
    types.add(firstType);
    types.add(secondType);
    return new ResolveTransformEvent<T>(this, types,
        (UnaryFunction<? super Throwable, ? extends T>) incidentObserver);
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E1 extends Throwable> Event<T> resolveTransform(
      @NotNull final Class<? extends E1> firstType,
      @NotNull final UnaryFunction<? super E1, ? extends T> incidentObserver) {
    final Set<Class<? extends Throwable>> types =
        Collections.<Class<? extends Throwable>>singleton(firstType);
    return new ResolveTransformEvent<T>(this, types,
        (UnaryFunction<? super Throwable, ? extends T>) incidentObserver);
  }

  @NotNull
  @SuppressWarnings("unchecked")
  public <E extends Throwable> Event<T> resolveTransform(
      @NotNull final Iterable<? extends Class<? extends E>> incidentTypes,
      @NotNull final UnaryFunction<? super E, ? extends T> incidentObserver) {
    return new ResolveTransformEvent<T>(this, Iterables.<Class<? extends Throwable>>toSet(incidentTypes),
        (UnaryFunction<? super Throwable, ? extends T>) incidentObserver);
  }

  @NotNull
  public Event<T> scheduleWithDelay(final long delay, @NotNull final TimeUnit unit) {
    return new ScheduleWithDelayEvent<T>(this, delay, unit);
  }

  @NotNull
  public <R> Event<R> then(
      @NotNull final UnaryFunction<? super T, ? extends Event<R>> effectHandler) {
    return when(this, effectHandler);
  }

  @NotNull
  public <R> Event<R> thenTransform(
      @NotNull final UnaryFunction<? super T, ? extends R> effectHandler) {
    return whenTransform(this, effectHandler);
  }

  @NotNull
  public Event<T> watch(@NotNull final EventObserver<? super T> effectHandler) {
    return new WatchEvent<T>(this, effectHandler);
  }

  @NotNull
  public Event<T> watch(@Nullable final Observer<? super T> effectObserver,
      @Nullable final Observer<? super Throwable> incidentObserver) {
    return watch(new DefaultEventObserver<T>(effectObserver, incidentObserver));
  }

  @NotNull
  abstract Actor getActor();

  public interface EventObserver<T> {

    void onEffect(T effect) throws Exception;

    void onIncident(@NotNull Throwable incident) throws Exception;
  }

  public static class EventNarrator<T> extends Event<T> implements Narrator<T> {

    private final Actor mActor;
    private final AtomicBoolean mIsClosed = new AtomicBoolean();
    private final BlockingQueue<Object> mQueue;

    private volatile Throwable mException;
    private HashMap<String, Sender> mSenders = new HashMap<String, Sender>();

    private EventNarrator(@NotNull final BlockingQueue<Object> queue) {
      final Setting setting = Setting.get();
      mQueue = ConstantConditions.notNull("queue", queue);
      mActor = setting.newActor(new PlotRole(setting) {

        @NotNull
        @Override
        public Behavior getBehavior(@NotNull final String id) {
          return new InitBehavior();
        }
      });
    }

    public void close() {
      if (!mIsClosed.getAndSet(true)) {
        if (mException == null) {
          mException = new NarrationStoppedException();
        }
        if (mQueue.isEmpty()) {
          mActor.tell(AVAILABLE, null, BackStage.STAND_IN);
        }
      }
    }

    public boolean report(@NotNull final Throwable incident, final long timeout,
        @NotNull final TimeUnit unit) throws InterruptedException {
      return enqueue(new Conflict(incident), timeout, unit);
    }

    public boolean tell(final T effect, final long timeout, @NotNull final TimeUnit unit) throws
        InterruptedException {
      return enqueue((effect != null) ? effect : NULL, timeout, unit);
    }

    @NotNull
    Actor getActor() {
      return mActor;
    }

    private void cancel(@NotNull final Throwable cause) {
      if (mException == null) {
        mException = cause;
      }
      mQueue.clear();
    }

    private boolean enqueue(@NotNull final Object resolution, final long timeout,
        @NotNull final TimeUnit unit) throws InterruptedException {
      final Throwable exception = mException;
      if (exception != null) {
        if (exception instanceof RuntimeException) {
          throw (RuntimeException) exception;

        } else {
          throw new PlotFailureException(exception);
        }
      }
      final BlockingQueue<Object> queue = mQueue;
      final boolean wasEmpty = queue.isEmpty();
      if (queue.offer(resolution, timeout, unit)) {
        close();
        if (wasEmpty) {
          mActor.tell(AVAILABLE, null, BackStage.STAND_IN);
        }
        return true;
      }
      return false;
    }

    private class InitBehavior extends AbstractBehavior {

      public void onMessage(final Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          Object effect = mQueue.poll();
          if (effect != null) {
            close();
            if (effect == NULL) {
              effect = null;
            }
            agent.setBehavior(new DoneBehavior(effect));

          } else if (mIsClosed.get()) {
            agent.setBehavior(new DoneBehavior(new Conflict(new NarrationStoppedException())));

          } else {
            final Options options = envelop.getOptions().threadOnly();
            mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));
            agent.setBehavior(new InputBehavior());
          }

        } else if (message == CANCEL) {
          final Conflict conflict = Conflict.ofCancel();
          cancel(conflict.getCause());
          agent.setBehavior(new DoneBehavior(conflict));
        }
        envelop.preventReceipt();
      }
    }

    private class InputBehavior extends AbstractBehavior {

      public void onMessage(final Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));

        } else if (message == CANCEL) {
          final Conflict conflict = Conflict.ofCancel();
          cancel(conflict.getCause());
          agent.setBehavior(new DoneBehavior(conflict));

        } else if (message == AVAILABLE) {
          Object effect = mQueue.poll();
          if (effect != null) {
            close();
            if (effect == NULL) {
              effect = null;
            }

          } else if (mIsClosed.get()) {
            effect = new Conflict(new NarrationStoppedException());

          } else {
            return;
          }
          final Actor self = agent.getSelf();
          for (final Sender sender : mSenders.values()) {
            sender.getSender().tell(effect, sender.getOptions(), self);
          }
          mSenders = null;
          agent.setBehavior(new DoneBehavior(effect));
        }
        envelop.preventReceipt();
      }
    }
  }

  static class DefaultEventObserver<T> implements EventObserver<T> {

    private final Observer<Object> mEffectObserver;
    private final Observer<Object> mIncidentObserver;

    @SuppressWarnings("unchecked")
    DefaultEventObserver(@Nullable final Observer<? super T> effectObserver,
        @Nullable final Observer<? super Throwable> incidentObserver) {
      mEffectObserver = (Observer<Object>) ((effectObserver != null) ? effectObserver : NO_OP);
      mIncidentObserver =
          (Observer<Object>) ((incidentObserver != null) ? incidentObserver : NO_OP);
    }

    public void onEffect(final T effect) throws Exception {
      mEffectObserver.accept(effect);
    }

    public void onIncident(@NotNull final Throwable incident) throws Exception {
      mIncidentObserver.accept(incident);
    }
  }

  private abstract static class AbstractEvent<T> extends Event<T> {

    private final Actor mActor;
    private final HashMap<Actor, Options> mInputActors = new HashMap<Actor, Options>();
    private final String mInputThread;
    private final Object[] mInputs;
    private final Options mOptions;
    private final Options mOutputOptions;
    private final Setting mSetting;

    private Conflict mConflict;
    private int mInputCount;
    private HashMap<String, Sender> mSenders = new HashMap<String, Sender>();

    private AbstractEvent(final int numInputs) {
      mInputs = new Object[numInputs];
      final Setting setting = (mSetting = Setting.get());
      final String actorId = (mActor = setting.newActor(new PlotRole(setting) {

        @NotNull
        @Override
        public Behavior getBehavior(@NotNull final String id) {
          return new InitBehavior();
        }
      })).getId();
      final Options options = (mOptions = new Options().withReceiptId(actorId));
      mInputThread = actorId + ":input";
      mOutputOptions = options.withThreadId(actorId + ":output");
    }

    void endAction() throws Exception {
    }

    @Nullable
    Actor getConflictActor(@NotNull final Conflict conflict, @NotNull final Agent agent) throws
        Exception {
      putConflict(conflict, agent);
      return null;
    }

    @NotNull
    abstract List<Actor> getInputActors();

    @Nullable
    Actor getOutputActor(@NotNull final Object[] inputs, @NotNull final Agent agent) throws
        Exception {
      putEffect(inputs[0], agent);
      return null;
    }

    @NotNull
    Setting getSetting() {
      return mSetting;
    }

    void putConflict(@NotNull final Conflict conflict, @NotNull final Agent agent) {
      fail(conflict, agent);
    }

    void putEffect(final Object effect, @NotNull final Agent agent) {
      done(effect, agent);
    }

    private void cancelInputActors(@NotNull final Agent agent) {
      final Actor self = agent.getSelf();
      for (final Actor actor : getInputActors()) {
        actor.tell(CANCEL, null, self);
      }
    }

    private void conflict(@NotNull final Conflict conflict, @NotNull final Agent agent) {
      try {
        final Actor conflictActor = getConflictActor(conflict, agent);
        if (conflictActor != null) {
          conflictActor.tell(GET, mOutputOptions, agent.getSelf());
          agent.setBehavior(new OutputBehavior());
        }

      } catch (final Throwable t) {
        fail(new Conflict(t), agent);
        if (t instanceof InterruptedException) {
          Thread.currentThread().interrupt();
        }
      }
    }

    private void done(Object message, @NotNull final Agent agent) {
      try {
        endAction();

      } catch (final Throwable t) {
        message = new Conflict(t);
        if (t instanceof InterruptedException) {
          Thread.currentThread().interrupt();
        }
      }
      done(message, mSenders, agent);
      mSenders = null;
    }

    private void fail(@NotNull Conflict conflict, @NotNull final Agent agent) {
      try {
        endAction();

      } catch (final Throwable t) {
        conflict = new Conflict(t);
        if (t instanceof InterruptedException) {
          Thread.currentThread().interrupt();
        }
      }
      done(conflict, mSenders, agent);
      mSenders = null;
    }

    private void getInputActors(@NotNull final Agent agent) {
      final Actor self = agent.getSelf();
      final HashMap<Actor, Options> inputActors = mInputActors;
      if (inputActors.isEmpty()) {
        @SuppressWarnings("UnnecessaryLocalVariable") final Options options = mOptions;
        final StringBuilder builder = new StringBuilder();
        for (final Actor actor : getInputActors()) {
          final String threadId = mInputThread + builder.append('#').toString();
          final Options inputOptions = options.withThreadId(threadId);
          inputActors.put(actor, inputOptions);
          actor.tell(GET, inputOptions, self);
        }

      } else {
        for (final Entry<Actor, Options> entry : inputActors.entrySet()) {
          entry.getKey().tell(GET, entry.getValue(), self);
        }
      }
    }

    private class CancelBehavior extends AbstractBehavior {

      public void onMessage(final Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));

        } else if (isSame(mOutputOptions.getThreadId(), envelop.getOptions().getThreadId())) {
          fail(Conflict.ofCancel(), agent);

        } else {
          final String thread = envelop.getOptions().getThreadId();
          if ((thread != null) && thread.startsWith(mInputThread)) {
            if (++mInputCount == mInputs.length) {
              final Conflict conflict = Conflict.ofCancel();
              try {
                final Actor conflictActor = getConflictActor(conflict, agent);
                if (conflictActor != null) {
                  conflictActor.tell(CANCEL, null, agent.getSelf());
                  fail(conflict, agent);
                }

              } catch (final Throwable t) {
                fail(new Conflict(t), agent);
                if (t instanceof InterruptedException) {
                  Thread.currentThread().interrupt();
                }
              }
            }
          }
        }
      }
    }

    private class InitBehavior extends AbstractBehavior {

      public void onMessage(Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));
          getInputActors(agent);
          agent.setBehavior(new InputBehavior());

        } else if (message == CANCEL) {
          cancelInputActors(agent);
          fail(Conflict.ofCancel(), agent);
        }
        envelop.preventReceipt();
      }
    }

    private class InputBehavior extends AbstractBehavior {

      public void onMessage(final Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));

        } else if (message == CANCEL) {
          cancelInputActors(agent);
          agent.setBehavior(new CancelBehavior());

        } else {
          final String inputThread = mInputThread;
          final String thread = envelop.getOptions().getThreadId();
          if ((thread != null) && thread.startsWith(inputThread)) {
            if (message instanceof Conflict) {
              if (mConflict == null) {
                mConflict = (Conflict) message;
              }

              if (++mInputCount == mInputs.length) {
                conflict((Conflict) message, agent);
              }

            } else if (message instanceof Bounce) {
              final Conflict conflict = Conflict.ofBounce((Bounce) message);
              if (mConflict == null) {
                mConflict = conflict;
              }

              if (++mInputCount == mInputs.length) {
                conflict(conflict, agent);
              }

            } else {
              final int index = thread.length() - inputThread.length() - 1;
              final Object[] inputs = mInputs;
              if ((index >= 0) && (index < inputs.length)) {
                inputs[index] = message;
                if (++mInputCount == inputs.length) {
                  if (mConflict != null) {
                    conflict(mConflict, agent);

                  } else {
                    try {
                      final Actor outputActor = getOutputActor(inputs, agent);
                      if (outputActor != null) {
                        outputActor.tell(GET, mOutputOptions, agent.getSelf());
                        agent.setBehavior(new OutputBehavior());
                      }

                    } catch (final Throwable t) {
                      fail(new Conflict(t), agent);
                      if (t instanceof InterruptedException) {
                        Thread.currentThread().interrupt();
                      }
                    }
                  }
                }

              } else {
                conflict(Conflict.ofCancel(), agent);
              }
            }
          }
        }
        envelop.preventReceipt();
      }
    }

    private class OutputBehavior extends AbstractBehavior {

      public void onMessage(final Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));

        } else if (message == CANCEL) {
          cancelInputActors(agent);
          agent.setBehavior(new CancelBehavior());

        } else {
          if (isSame(mOutputOptions.getThreadId(), envelop.getOptions().getThreadId())) {
            if (message instanceof Conflict) {
              fail((Conflict) message, agent);

            } else if (message instanceof Bounce) {
              fail(Conflict.ofBounce((Bounce) message), agent);

            } else {
              done(message, agent);
            }
          }
        }
        envelop.preventReceipt();
      }
    }

    @NotNull
    Actor getActor() {
      return mActor;
    }
  }

  private static class DoneBehavior extends AbstractBehavior {

    private final Object mEffect;

    private DoneBehavior(final Object effect) {
      mEffect = effect;
    }

    public void onMessage(final Object message, @NotNull final Envelop envelop,
        @NotNull final Agent agent) {
      if (message == GET) {
        envelop.getSender().tell(mEffect, envelop.getOptions().threadOnly(), agent.getSelf());
      }
      envelop.preventReceipt();
    }
  }

  private static class EffectEvent<T> extends Event<T> {

    private final Actor mActor;

    private EffectEvent(final T effect) {
      final Setting setting = Setting.get();
      mActor = setting.newActor(new LocalPlotRole(setting) {

        @NotNull
        @Override
        public Behavior getBehavior(@NotNull final String id) {
          return new DoneBehavior(effect);
        }
      });
    }

    @NotNull
    Actor getActor() {
      return mActor;
    }
  }

  private static class EventObserverRole<T> extends Role {

    private final EventObserver<? super T> mEventObserver;

    private EventObserverRole(@NotNull final EventObserver<? super T> eventObserver) {
      mEventObserver = ConstantConditions.notNull("eventObserver", eventObserver);
    }

    @NotNull
    public Behavior getBehavior(@NotNull final String id) {
      return new AbstractBehavior() {

        @SuppressWarnings("unchecked")
        public void onMessage(final Object message, @NotNull final Envelop envelop,
            @NotNull final Agent agent) throws Exception {
          if (message instanceof Conflict) {
            mEventObserver.onIncident(((Conflict) message).getCause());
            agent.dismissSelf();

          } else if (message instanceof Bounce) {
            mEventObserver.onIncident(PlotFailureException.getOrNew((Bounce) message));
            agent.dismissSelf();

          } else if (!(message instanceof Receipt)) {
            mEventObserver.onEffect((T) message);
            agent.dismissSelf();
          }
        }
      };
    }

    @NotNull
    @Override
    public ExecutorService getExecutorService(@NotNull final String id) {
      return ExecutorServices.localExecutor();
    }
  }

  private static class EventualEvent<T> extends AbstractEvent<T> {

    private final List<Actor> mActors;
    private final Action mEventualAction;

    private EventualEvent(@NotNull final Event<T> event, @NotNull final Action eventualAction) {
      super(1);
      mActors = Collections.singletonList(event.getActor());
      mEventualAction = ConstantConditions.notNull("eventualAction", eventualAction);
    }

    @Override
    void endAction() throws Exception {
      Setting.set(getSetting());
      try {
        mEventualAction.run();

      } finally {
        Setting.unset();
      }
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }
  }

  private static class FunctionEvent<T> extends AbstractEvent<T> {

    private final NullaryFunction<? extends Event<? extends T>> mEventCreator;

    private List<Actor> mActors;

    private FunctionEvent(
        @NotNull final NullaryFunction<? extends Event<? extends T>> eventCreator) {
      super(1);
      mEventCreator = ConstantConditions.notNull("eventCreator", eventCreator);
    }

    @NotNull
    List<Actor> getInputActors() {
      if (mActors == null) {
        Setting.set(getSetting());
        Event<? extends T> event;
        try {
          event = mEventCreator.call();
          if (event == null) {
            event = ofNull();
          }

        } catch (final Throwable t) {
          event = ofIncident(t);
          if (t instanceof InterruptedException) {
            Thread.currentThread().interrupt();
          }

        } finally {
          Setting.unset();
        }
        mActors = Collections.singletonList(event.getActor());
      }
      return mActors;
    }
  }

  private static class GenericEvent<T, R> extends AbstractEvent<R> {

    private final List<Actor> mActors;
    private final UnaryFunction<? super List<T>, ? extends Event<? extends R>> mEffectHandler;

    private GenericEvent(@NotNull final Iterable<? extends Event<? extends T>> events,
        @NotNull final UnaryFunction<? super List<T>, ? extends Event<? extends R>> effectHandler) {
      super(Iterables.size(events));
      final ArrayList<Actor> actors = new ArrayList<Actor>();
      for (final Event<? extends T> event : events) {
        actors.add(event.getActor());
      }
      mActors = actors;
      mEffectHandler = ConstantConditions.notNull("effectHandler", effectHandler);
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }

    @Nullable
    @Override
    @SuppressWarnings("unchecked")
    Actor getOutputActor(@NotNull final Object[] inputs, @NotNull final Agent agent) throws
        Exception {
      Setting.set(getSetting());
      try {
        final ArrayList<T> inputList = new ArrayList<T>();
        for (final Object input : inputs) {
          inputList.add((T) input);
        }
        final Event<? extends R> event = mEffectHandler.call(inputList);
        return ((event != null) ? event : ofNull()).getActor();

      } finally {
        Setting.unset();
      }
    }
  }

  private static class GenericTransformEvent<T, R> extends AbstractEvent<R> {

    private final List<Actor> mActors;
    private final UnaryFunction<? super List<T>, ? extends R> mEffectHandler;

    private GenericTransformEvent(@NotNull final Iterable<? extends Event<? extends T>> events,
        @NotNull final UnaryFunction<? super List<T>, ? extends R> effectHandler) {
      super(Iterables.size(events));
      final ArrayList<Actor> actors = new ArrayList<Actor>();
      for (final Event<? extends T> event : events) {
        actors.add(event.getActor());
      }
      mActors = actors;
      mEffectHandler = ConstantConditions.notNull("effectHandler", effectHandler);
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }

    @Nullable
    @Override
    @SuppressWarnings("unchecked")
    Actor getOutputActor(@NotNull final Object[] inputs, @NotNull final Agent agent) throws
        Exception {
      Setting.set(getSetting());
      try {
        final ArrayList<T> inputList = new ArrayList<T>();
        for (final Object input : inputs) {
          inputList.add((T) input);
        }
        final R effect = mEffectHandler.call(inputList);
        putEffect(effect, agent);
        return null;

      } finally {
        Setting.unset();
      }
    }
  }

  private static class IncidentEvent<T> extends Event<T> {

    private final Actor mActor;

    private IncidentEvent(@NotNull final Throwable incident) {
      final Setting setting = Setting.get();
      final Conflict conflict = new Conflict(incident);
      mActor = setting.newActor(new LocalPlotRole(setting) {

        @NotNull
        @Override
        public Behavior getBehavior(@NotNull final String id) {
          return new DoneBehavior(conflict);
        }
      });
    }

    @NotNull
    Actor getActor() {
      return mActor;
    }
  }

  private static class ResolveEvent<T> extends AbstractEvent<T> {

    private final List<Actor> mActors;
    private final UnaryFunction<? super Throwable, ? extends Event<T>> mIncidentHandler;
    private final Set<Class<? extends Throwable>> mIncidentTypes;

    private ResolveEvent(@NotNull final Event<? extends T> event,
        @NotNull final Set<Class<? extends Throwable>> incidentTypes,
        @NotNull final UnaryFunction<? super Throwable, ? extends Event<T>> incidentHandler) {
      super(1);
      mActors = Collections.singletonList(event.getActor());
      mIncidentTypes = ConstantConditions.notNullElements("incidentTypes", incidentTypes);
      mIncidentHandler = ConstantConditions.notNull("incidentHandler", incidentHandler);
    }

    @Nullable
    @Override
    Actor getConflictActor(@NotNull final Conflict conflict, @NotNull final Agent agent) throws
        Exception {
      final Throwable incident = conflict.getCause();
      for (final Class<? extends Throwable> incidentType : mIncidentTypes) {
        if (incidentType.isInstance(incident)) {
          Setting.set(getSetting());
          try {
            final Event<T> event = mIncidentHandler.call(incident);
            return ((event != null) ? event : ofNull()).getActor();

          } finally {
            Setting.unset();
          }
        }
      }
      return super.getConflictActor(conflict, agent);
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }
  }

  private static class ResolveTransformEvent<T> extends AbstractEvent<T> {

    private final List<Actor> mActors;
    private final UnaryFunction<? super Throwable, ? extends T> mIncidentHandler;
    private final Set<Class<? extends Throwable>> mIncidentTypes;

    private ResolveTransformEvent(@NotNull final Event<? extends T> event,
        @NotNull final Set<Class<? extends Throwable>> incidentTypes,
        @NotNull final UnaryFunction<? super Throwable, ? extends T> incidentHandler) {
      super(1);
      mActors = Collections.singletonList(event.getActor());
      mIncidentTypes = ConstantConditions.notNullElements("incidentTypes", incidentTypes);
      mIncidentHandler = ConstantConditions.notNull("incidentHandler", incidentHandler);
    }

    @Nullable
    @Override
    Actor getConflictActor(@NotNull final Conflict conflict, @NotNull final Agent agent) throws
        Exception {
      final Throwable incident = conflict.getCause();
      for (final Class<? extends Throwable> incidentType : mIncidentTypes) {
        if (incidentType.isInstance(incident)) {
          Setting.set(getSetting());
          try {
            final T effect = mIncidentHandler.call(incident);
            putEffect(effect, agent);
            return null;

          } finally {
            Setting.unset();
          }
        }
      }
      return super.getConflictActor(conflict, agent);
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }
  }

  private static class ScheduleWithDelayEvent<T> extends Event<T> implements Runnable {

    private final Actor mActor;
    private final long mDelay;
    private final Actor mInputActor;
    private final Options mInputOptions;
    private final TimeUnit mUnit;

    private boolean mInputPending;
    private ScheduledFuture<?> mScheduledFuture;
    private HashMap<String, Sender> mSenders = new HashMap<String, Sender>();

    private ScheduleWithDelayEvent(@NotNull final Event<? extends T> event, final long delay,
        @NotNull final TimeUnit unit) {
      final Setting setting = Setting.get();
      mInputActor = event.getActor();
      mDelay = ConstantConditions.positive("delay", delay);
      mUnit = ConstantConditions.notNull("unit", unit);
      final String actorId = (mActor = setting.newActor(new PlotRole(setting) {

        @NotNull
        @Override
        public Behavior getBehavior(@NotNull final String id) {
          return new InitBehavior();
        }
      })).getId();
      mInputOptions = new Options().withReceiptId(actorId).withThreadId(actorId + ":input");
    }

    public void run() {
      mInputPending = true;
      mInputActor.tell(GET, mInputOptions, mActor);
    }

    private void done(Object message, @NotNull final Agent agent) {
      final ScheduledFuture<?> scheduledFuture = mScheduledFuture;
      if (scheduledFuture != null) {
        scheduledFuture.cancel(false);
      }
      done(message, mSenders, agent);
      mSenders = null;
    }

    private void fail(@NotNull final Conflict conflict, @NotNull final Agent agent) {
      final ScheduledFuture<?> scheduledFuture = mScheduledFuture;
      if (scheduledFuture != null) {
        scheduledFuture.cancel(false);
      }
      done(conflict, mSenders, agent);
      mSenders = null;
    }

    private class CancelBehavior extends AbstractBehavior {

      public void onMessage(final Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));

        } else if (isSame(mInputOptions.getThreadId(), envelop.getOptions().getThreadId())) {
          fail(Conflict.ofCancel(), agent);
        }
      }
    }

    private class InitBehavior extends AbstractBehavior {

      public void onMessage(Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));
          mScheduledFuture = agent.getScheduledExecutorService()
              .schedule(ScheduleWithDelayEvent.this, mDelay, mUnit);
          agent.setBehavior(new InputBehavior());

        } else if (message == CANCEL) {
          mInputActor.tell(CANCEL, null, mActor);
          fail(Conflict.ofCancel(), agent);
        }
        envelop.preventReceipt();
      }
    }

    private class InputBehavior extends AbstractBehavior {

      public void onMessage(final Object message, @NotNull final Envelop envelop,
          @NotNull final Agent agent) {
        if (message == GET) {
          final Options options = envelop.getOptions().threadOnly();
          mSenders.put(options.getThreadId(), new Sender(envelop.getSender(), options));

        } else if (message == CANCEL) {
          mInputActor.tell(CANCEL, null, mActor);
          if (mInputPending) {
            agent.setBehavior(new CancelBehavior());

          } else {
            fail(Conflict.ofCancel(), agent);
          }

        } else if (isSame(mInputOptions.getThreadId(), envelop.getOptions().getThreadId())) {
          if (message instanceof Conflict) {
            fail((Conflict) message, agent);

          } else if (message instanceof Bounce) {
            fail(Conflict.ofBounce((Bounce) message), agent);

          } else {
            done(message, agent);
          }
        }
        envelop.preventReceipt();
      }
    }

    @NotNull
    Actor getActor() {
      return mActor;
    }
  }

  private static class Sender {

    private final Options mOptions;
    private final Actor mSender;

    private Sender(@NotNull final Actor sender, @NotNull final Options options) {
      mSender = sender;
      mOptions = options;
    }

    @NotNull
    Options getOptions() {
      return mOptions;
    }

    @NotNull
    Actor getSender() {
      return mSender;
    }
  }
{{#arities}}

  private static class {{classPrefix}}Event<{{#paramTypes}}{{type}}, {{/paramTypes}}R> extends AbstractEvent<R> {

    private final List<Actor> mActors;
    private final {{classPrefix}}Function<{{#paramTypes}}? super {{type}}, {{/paramTypes}}? extends Event<? extends R>> mEffectHandler;

    @SuppressWarnings("ArraysAsListWithZeroOrOneArgument")
    private {{classPrefix}}Event({{#paramTypes}}@NotNull final Event<? extends {{type}}> {{prefix}}Event, {{/paramTypes}}
        @NotNull final {{classPrefix}}Function<{{#paramTypes}}? super {{type}}, {{/paramTypes}}? extends Event<? extends R>> effectHandler) {
      super({{paramNum}});
      mActors = Arrays.asList({{#paramTypes}}{{prefix}}Event.getActor(){{#hasNext}}, {{/hasNext}}{{/paramTypes}});
      mEffectHandler = ConstantConditions.notNull("effectHandler", effectHandler);
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }

    @Nullable
    @Override
    @SuppressWarnings("unchecked")
    Actor getOutputActor(@NotNull final Object[] inputs, @NotNull final Agent agent) throws
        Exception {
      Setting.set(getSetting());
      try {
        final Event<? extends R> event = mEffectHandler.call({{#paramTypes}}({{type}}) inputs[{{index}}]{{#hasNext}}, {{/hasNext}}{{/paramTypes}});
        return ((event != null) ? event : ofNull()).getActor();

      } finally {
        Setting.unset();
      }
    }
  }

  private static class {{classPrefix}}TransformEvent<{{#paramTypes}}{{type}}, {{/paramTypes}}R> extends AbstractEvent<R> {

    private final List<Actor> mActors;
    private final {{classPrefix}}Function<{{#paramTypes}}? super {{type}}, {{/paramTypes}}? extends R> mEffectHandler;

    @SuppressWarnings("ArraysAsListWithZeroOrOneArgument")
    private {{classPrefix}}TransformEvent({{#paramTypes}}@NotNull final Event<? extends {{type}}> {{prefix}}Event, {{/paramTypes}}
        @NotNull final {{classPrefix}}Function<{{#paramTypes}}? super {{type}}, {{/paramTypes}}? extends R> effectHandler) {
      super({{paramNum}});
      mActors = Arrays.asList({{#paramTypes}}{{prefix}}Event.getActor(){{#hasNext}}, {{/hasNext}}{{/paramTypes}});
      mEffectHandler = ConstantConditions.notNull("effectHandler", effectHandler);
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }

    @Nullable
    @Override
    @SuppressWarnings("unchecked")
    Actor getOutputActor(@NotNull final Object[] inputs, @NotNull final Agent agent) throws
        Exception {
      Setting.set(getSetting());
      try {
        final R effect = mEffectHandler.call({{#paramTypes}}({{type}}) inputs[{{index}}]{{#hasNext}}, {{/hasNext}}{{/paramTypes}});
        putEffect(effect, agent);
        return null;

      } finally {
        Setting.unset();
      }
    }
  }
{{/arities}}

  private static class WatchEvent<T> extends AbstractEvent<T> {

    private final List<Actor> mActors;
    private final EventObserver<? super T> mEventObserver;

    private WatchEvent(@NotNull final Event<? extends T> event,
        @NotNull final EventObserver<? super T> eventObserver) {
      super(1);
      mActors = Collections.singletonList(event.getActor());
      mEventObserver = ConstantConditions.notNull("eventObserver", eventObserver);
    }

    @Nullable
    @Override
    @SuppressWarnings("unchecked")
    Actor getOutputActor(@NotNull final Object[] inputs, @NotNull final Agent agent) throws
        Exception {
      Setting.set(getSetting());
      try {
        mEventObserver.onEffect((T) inputs[0]);

      } finally {
        Setting.unset();
      }
      return super.getOutputActor(inputs, agent);
    }

    @Nullable
    @Override
    Actor getConflictActor(@NotNull final Conflict conflict, @NotNull final Agent agent) throws
        Exception {
      Setting.set(getSetting());
      try {
        mEventObserver.onIncident(conflict.getCause());

      } finally {
        Setting.unset();
      }
      return super.getConflictActor(conflict, agent);
    }

    @NotNull
    List<Actor> getInputActors() {
      return mActors;
    }
  }
}
