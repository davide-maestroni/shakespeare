/*
 * Copyright 2018 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
  repositories {
    google()
    jcenter()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.0.1'
    classpath "org.jacoco:org.jacoco.core:${project.getProperty('jacocoVersion')}"
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
  }
}

allprojects {
  repositories {
    jcenter()
    mavenCentral()
  }
}

wrapper {
  gradleVersion = project.getProperty('gradleVersion')
  distributionType = Wrapper.DistributionType.ALL
}

task clean(type: Delete) {
  delete buildDir
}

gradle.projectsEvaluated {
  apply plugin: 'com.github.kt3k.coveralls'
  apply plugin: 'jacoco'

  jacoco {
    toolVersion project.getProperty('jacocoVersion')
  }

  def publishedProjects = subprojects.findAll {
    it.plugins.hasPlugin('jacoco')
  }

  coveralls {
    def sources = files()
    publishedProjects.each {
      if (it.plugins.hasPlugin('java')) {
        sources += files(it.sourceSets.main.allSource.srcDirs)
      } else {
        sources += files(it.android.sourceSets.main.java.srcDirs)
      }
    }
    sourceDirs = sources.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoFullReport/jacocoFullReport.xml"
  }

  task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(publishedProjects.test)

    def additionalSources = files()
    def sources = files()
    def classes = files()
    def execs = files()
    publishedProjects.each {
      if (it.plugins.hasPlugin('java')) {
        additionalSources += files(it.sourceSets.main.allJava.srcDirs)
        sources += files(it.sourceSets.main.allSource.srcDirs)
        classes += files(it.sourceSets.main.output)
        execs += files(it.jacocoTestReport.executionData)
      } else {
        sources += files(it.android.sourceSets.main.java.srcDirs)
        classes += fileTree(dir: "${it.buildDir}/intermediates/classes/debug", exclude: ['**/R*.class', '**/BuildConfig.class'])
        execs += fileTree("${it.buildDir}/outputs/code-coverage/connected")
      }
    }

    additionalSourceDirs = additionalSources
    sourceDirectories = sources
    classDirectories = classes
    executionData = execs

    reports {
      html.enabled = true // human readable
      xml.enabled = true // required by coveralls
    }

    onlyIf = {
      true
    }

    doFirst {
      executionData = files(executionData.findAll { it.exists() })
    }
  }
}
